{"version":3,"sources":["../../src/utils/helpers.js"],"names":["require","config","getTokenPriceAndBalance","token","tokenContract","ethers","Contract","address","tokenABI","wallet","bnbContract","WETH","chainID","balanceOf","bnbBalance","busdContract","BUSD","busdBalance","balance","Fetcher","fetchPairData","provider","pairBUSD","routeBUSD","Route","bnbInUsd","midPrice","toSignificant","price","name","TOKEN","Token","decimal","pairBNB","routeBNB","currentPrice","parseFloat","bnbPrice","getCurrentPrice","coin","currentPriceBNB","currentPriceBUSD","currentPriceConversion","base","pairTokenBUSD","routeTokenBUSD","currentPriceTokenBUSD"],"mappings":"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","sourcesContent":["require('dotenv').config()\r\nimport { formatEther, formatUnits } from '@ethersproject/units'\r\nimport { Route, Token, Fetcher, WETH } from '@pancakeswap/sdk'\r\nimport { ethers } from 'ethers'\r\nimport tokenABI from './abi/token.json'\r\nimport { wallet, chainID, provider, BUSD } from './wallet'\r\n\r\nconst getTokenPriceAndBalance = async (token) => {\r\n    const tokenContract = new ethers.Contract(token.address, tokenABI, wallet)\r\n\r\n    const bnbContract = new ethers.Contract(\r\n        WETH[chainID].address,\r\n        tokenABI,\r\n        wallet\r\n    )\r\n    const bnbBalance = await bnbContract.balanceOf(wallet.address)\r\n\r\n    const busdContract = new ethers.Contract(BUSD.address, tokenABI, wallet)\r\n    const busdBalance = await busdContract.balanceOf(wallet.address)\r\n\r\n    const balance = await tokenContract.balanceOf(wallet.address)\r\n    const pairBUSD = await Fetcher.fetchPairData(BUSD, WETH[chainID], provider)\r\n    const routeBUSD = new Route([pairBUSD], WETH[chainID])\r\n    const bnbInUsd = routeBUSD.midPrice.toSignificant(6)\r\n\r\n    let price = 0\r\n    if (token.name !== 'BNB') {\r\n        const TOKEN = new Token(\r\n            chainID,\r\n            token.address,\r\n            token.decimal,\r\n            token.name\r\n        )\r\n\r\n        const pairBNB = await Fetcher.fetchPairData(\r\n            WETH[chainID],\r\n            TOKEN,\r\n            provider\r\n        )\r\n        const routeBNB = new Route([pairBNB], TOKEN)\r\n        const currentPrice = routeBNB.midPrice.toSignificant(6)\r\n        price = currentPrice * bnbInUsd\r\n    } else {\r\n        price = bnbInUsd\r\n    }\r\n    return {\r\n        balance: parseFloat(formatUnits(balance, token.decimal)),\r\n        price: parseFloat(price),\r\n        bnbPrice: parseFloat(bnbInUsd),\r\n        bnbBalance: parseFloat(formatEther(bnbBalance)),\r\n        busdBalance: parseFloat(formatEther(busdBalance)),\r\n    }\r\n}\r\n\r\n// ********************************************\r\n// Get Current Price\r\n// ********************************************\r\nconst getCurrentPrice = async (coin) => {\r\n    const TOKEN = new Token(chainID, coin.address, coin.decimal, coin.name)\r\n    let currentPrice = 0\r\n\r\n    // GET BNB to TOKEN Price\r\n    if (coin.name !== 'BNB') {\r\n        const pairBNB = await Fetcher.fetchPairData(\r\n            WETH[chainID],\r\n            TOKEN,\r\n            provider\r\n        )\r\n        const routeBNB = new Route([pairBNB], TOKEN)\r\n        const currentPriceBNB = routeBNB.midPrice.toSignificant(6)\r\n\r\n        // GET BNB to BUSD Price\r\n        const pairBUSD = await Fetcher.fetchPairData(\r\n            BUSD,\r\n            WETH[chainID],\r\n            provider\r\n        )\r\n        const routeBUSD = new Route([pairBUSD], WETH[chainID])\r\n        const currentPriceBUSD = routeBUSD.midPrice.toSignificant(6)\r\n\r\n        currentPrice = currentPriceBNB * currentPriceBUSD\r\n    } else {\r\n        // GET BNB to BUSD Price\r\n        const pairBUSD = await Fetcher.fetchPairData(\r\n            BUSD,\r\n            WETH[chainID],\r\n            provider\r\n        )\r\n        const routeBUSD = new Route([pairBUSD], WETH[chainID])\r\n        const currentPriceBUSD = routeBUSD.midPrice.toSignificant(6)\r\n\r\n        currentPrice = currentPriceBUSD\r\n    }\r\n\r\n    // GET BUSD to TOKEN Price\r\n    let currentPriceConversion = 0\r\n    if (coin.base === 'BUSD') {\r\n        const pairTokenBUSD = await Fetcher.fetchPairData(BUSD, TOKEN, provider)\r\n        const routeTokenBUSD = new Route([pairTokenBUSD], TOKEN)\r\n        const currentPriceTokenBUSD = routeTokenBUSD.midPrice.toSignificant(6)\r\n        currentPriceConversion = currentPriceTokenBUSD\r\n    } else {\r\n        const pairBNB = await Fetcher.fetchPairData(\r\n            WETH[chainID],\r\n            TOKEN,\r\n            provider\r\n        )\r\n        const routeBNB = new Route([pairBNB], TOKEN)\r\n        const currentPriceBNB = routeBNB.midPrice.toSignificant(6)\r\n        currentPriceConversion = currentPriceBNB\r\n    }\r\n    return { currentPrice, currentPriceConversion }\r\n}\r\n\r\nexport { getTokenPriceAndBalance, getCurrentPrice }\r\n"],"file":"helpers.js"}