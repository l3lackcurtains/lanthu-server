{"version":3,"sources":["../../src/trading/buy.js"],"names":["buyToken","trade","coin","swapAmount","tokenAmount","currentPrice","SWAPTOKEN","base","BUSD","WETH","chainID","amountIn","ethers","utils","parseUnits","toString","to","wallet","address","tokenContract","Contract","tokenABI","allowance","pancakeSwapContractAddress","lte","approve","BigNumber","from","maxAllowance","gasLimit","gasPrice","GWEI","approved","provider","once","hash","console","log","balanceOf","balance","msg","updateErrorStatus","TOKEN","Token","decimal","name","Fetcher","fetchPairData","pair","route","Route","tradeData","Trade","TokenAmount","TradeType","EXACT_INPUT","slippageTolerance","Percent","slippage","amountOutMin","minimumAmountOut","raw","path","px","push","deadline","Math","floor","Date","now","value","inputAmount","pancakeSwapContract","swapExactTokensForTokens","String","bought","wait","updateBoughtStatus","TradeModal","findOne","_id","tradeInDB","status","save","history","HistoryModal","tradeId","e","newLog","LogModal","message","details","module","exports"],"mappings":"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","sourcesContent":["import {\r\n    Fetcher,\r\n    Percent,\r\n    Route,\r\n    Token,\r\n    TokenAmount,\r\n    Trade,\r\n    TradeType,\r\n    WETH,\r\n} from '@pancakeswap/sdk'\r\n\r\nimport { ethers } from 'ethers'\r\nimport { formatEther } from 'ethers/lib/utils'\r\nimport tokenABI from '../utils/abi/token.json'\r\nimport { TradeModal, LogModal, HistoryModal } from '../utils/db'\r\nimport { sendMessage } from '../utils/notification'\r\n\r\nimport {\r\n    provider,\r\n    wallet,\r\n    pancakeSwapContract,\r\n    pancakeSwapContractAddress,\r\n    chainID,\r\n    maxAllowance,\r\n    gasLimit,\r\n    slippage,\r\n    GWEI,\r\n    BUSD,\r\n} from '../utils/wallet'\r\n\r\nconst buyToken = async (trade, coin, swapAmount, tokenAmount, currentPrice) => {\r\n    try {\r\n        let SWAPTOKEN = null\r\n        if (coin.base === 'BUSD') {\r\n            SWAPTOKEN = BUSD\r\n        } else {\r\n            SWAPTOKEN = WETH[chainID]\r\n        }\r\n\r\n        const amountIn = ethers.utils.parseUnits(swapAmount.toString(), 18)\r\n\r\n        const to = wallet.address\r\n\r\n        const tokenContract = new ethers.Contract(\r\n            SWAPTOKEN.address,\r\n            tokenABI,\r\n            wallet\r\n        )\r\n\r\n        const allowance = await tokenContract.allowance(\r\n            to,\r\n            pancakeSwapContractAddress\r\n        )\r\n\r\n        if (allowance.lte(amountIn)) {\r\n            const approved = await tokenContract.approve(\r\n                pancakeSwapContractAddress,\r\n                new ethers.BigNumber.from(maxAllowance),\r\n                {\r\n                    gasLimit: gasLimit,\r\n                    gasPrice: 5 * GWEI,\r\n                }\r\n            )\r\n\r\n            await provider.once(approved.hash, () => {\r\n                console.log('Approved...')\r\n            })\r\n        }\r\n\r\n        const balance = await tokenContract.balanceOf(to)\r\n\r\n        if (balance.lte(amountIn)) {\r\n            const msg = `Low balance ${formatEther(balance)} < ${formatEther(\r\n                amountIn\r\n            )} for this trade.`\r\n            await updateErrorStatus(trade, msg)\r\n            return\r\n        }\r\n\r\n        const TOKEN = new Token(chainID, coin.address, coin.decimal, coin.name)\r\n\r\n        const pair = await Fetcher.fetchPairData(SWAPTOKEN, TOKEN, provider)\r\n\r\n        const route = new Route([pair], SWAPTOKEN, TOKEN)\r\n\r\n        const tradeData = new Trade(\r\n            route,\r\n            new TokenAmount(SWAPTOKEN, amountIn),\r\n            TradeType.EXACT_INPUT\r\n        )\r\n\r\n        const slippageTolerance = new Percent(slippage.toString(), '100')\r\n\r\n        const amountOutMin = tradeData.minimumAmountOut(slippageTolerance).raw\r\n\r\n        const path = []\r\n\r\n        for (let px of route.path) {\r\n            path.push(px.address)\r\n        }\r\n\r\n        const deadline = Math.floor(Date.now() / 1000) + 60 * 10\r\n\r\n        const value = tradeData.inputAmount.raw\r\n\r\n        const bought = await pancakeSwapContract.swapExactTokensForTokens(\r\n            new ethers.BigNumber.from(String(value)),\r\n            new ethers.BigNumber.from(String(amountOutMin)),\r\n            path,\r\n            to,\r\n            deadline,\r\n            {\r\n                gasLimit: gasLimit,\r\n                gasPrice: 5 * GWEI,\r\n            }\r\n        )\r\n\r\n        await bought.wait()\r\n        await updateBoughtStatus(trade, coin, tokenAmount, currentPrice)\r\n    } catch (e) {\r\n        const msg = `Error on token buy! ${tokenAmount} ${coin.name} at ${currentPrice} ${coin.name}`\r\n        await updateErrorStatus(trade, msg, e)\r\n    }\r\n}\r\n\r\nconst updateBoughtStatus = async (trade, coin, tokenAmount, currentPrice) => {\r\n    const tradeInDB = await TradeModal.findOne({ _id: trade._id })\r\n    tradeInDB.status = 'BOUGHT'\r\n    await tradeInDB.save()\r\n\r\n    // Save in history\r\n    const history = new HistoryModal({\r\n        tradeId: trade._id,\r\n        bought: currentPrice,\r\n    })\r\n    history.save()\r\n\r\n    const msg = `Bought ${tokenAmount} ${coin.name} at ${currentPrice} ${coin.name}`\r\n    await sendMessage('${coin.name} bought', msg)\r\n}\r\n\r\nconst updateErrorStatus = async (trade, msg, e = '') => {\r\n    const newLog = new LogModal({ message: msg, details: e.toString() })\r\n    newLog.save()\r\n    console.log(msg, e)\r\n\r\n    // Update status and send notification\r\n    const tradeInDB = await TradeModal.findOne({ _id: trade._id })\r\n    tradeInDB.status = 'ERROR'\r\n    await tradeInDB.save()\r\n    await sendMessage('Error on buying ${coin.name}', msg)\r\n}\r\n\r\nmodule.exports = { buyToken }\r\n"],"file":"buy.js"}