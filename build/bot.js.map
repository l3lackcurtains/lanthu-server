{"version":3,"sources":["../src/bot.js"],"names":["startTheBot","TradeModal","find","trades","trade","status","TokenModal","findOne","_id","tokenId","coin","currentPrice","currentPriceConversion","tokenAmount","parseFloat","amount","swapAmount","buyLimit","console","log","name","base","sellLimit","stopLossLimit","errStr","toString","includes","msg","newLog","LogModal","message","details","save","id","tradeInDB","error","success","module","exports"],"mappings":"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","sourcesContent":["import { TradeModal, TokenModal, LogModal } from './utils/db'\r\nimport { getCurrentPrice } from './utils/helpers'\r\nimport { buyToken } from './trading/buy'\r\nimport { sellToken } from './trading/sell'\r\n\r\nconst startTheBot = async () => {\r\n    const trades = await TradeModal.find()\r\n\r\n    for (let trade of trades) {\r\n        // Skip success trades..\r\n        if (trade.status === 'SOLD' || trade.status === 'ERROR') continue\r\n\r\n        const coin = await TokenModal.findOne({ _id: trade.tokenId })\r\n\r\n        const { currentPrice, currentPriceConversion } = await getCurrentPrice(\r\n            coin\r\n        )\r\n\r\n        try {\r\n            const tokenAmount = parseFloat(trade.amount)\r\n            const swapAmount = parseFloat(trade.amount * currentPriceConversion)\r\n            if (\r\n                trade.status === 'INIT' &&\r\n                trade.buyLimit > 0 &&\r\n                currentPrice < trade.buyLimit\r\n            ) {\r\n                console.log(\r\n                    `Start buying ${tokenAmount} ${coin.name} (${swapAmount} ${coin.base}) `\r\n                )\r\n                await buyToken(\r\n                    trade,\r\n                    coin,\r\n                    swapAmount,\r\n                    tokenAmount,\r\n                    currentPrice\r\n                )\r\n            } else if (\r\n                trade.status === 'BOUGHT' &&\r\n                ((trade.sellLimit > 0 && currentPrice > trade.sellLimit) ||\r\n                    (trade.stopLossLimit > 0 &&\r\n                        currentPrice < trade.stopLossLimit))\r\n            ) {\r\n                console.log(\r\n                    `Start selling ${tokenAmount} ${coin.name} (${swapAmount} ${coin.base}) `\r\n                )\r\n                await sellToken(\r\n                    trade,\r\n                    coin,\r\n                    swapAmount,\r\n                    tokenAmount,\r\n                    currentPrice\r\n                )\r\n            }\r\n        } catch (e) {\r\n            const errStr = e.toString()\r\n            if (errStr.includes('getReserves()')) {\r\n                const msg = `No token pair found for ${coin.name}.`\r\n                const newLog = new LogModal({\r\n                    message: msg,\r\n                    details: e.toString(),\r\n                })\r\n                newLog.save()\r\n\r\n                console.log(e)\r\n                console.log(msg)\r\n\r\n                const tradeInDB = await TradeModal.findOne({ id: trade.id })\r\n                tradeInDB.error = true\r\n                tradeInDB.success = false\r\n                await tradeInDB.save()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = { startTheBot }\r\n"],"file":"bot.js"}