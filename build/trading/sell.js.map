{"version":3,"sources":["../../src/trading/sell.js"],"names":["sellToken","trade","coin","swapAmount","tokenAmount","currentPrice","SWAPTOKEN","base","BUSD","WETH","chainID","to","wallet","address","tokenContract","ethers","Contract","tokenABI","amountIn","utils","parseUnits","toString","decimal","allowance","pancakeSwapContractAddress","lte","approve","BigNumber","from","maxAllowance","gasLimit","gasPrice","GWEI","approved","provider","once","hash","console","log","balanceOf","balance","tokenBalance","msg","updateErrorStatus","TOKEN","Token","name","Fetcher","fetchPairData","pair","route","Route","tradeData","Trade","TokenAmount","TradeType","EXACT_INPUT","slippageTolerance","Percent","slippage","amountOutMin","minimumAmountOut","raw","path","px","push","deadline","Math","floor","Date","now","value","inputAmount","pancakeSwapContract","swapExactTokensForTokens","String","sold","wait","updateSoldStatus","TradeModal","findOne","_id","tradeInDB","status","save","HistoryModal","tradeId","history","profit","bought","e","newLog","LogModal","message","details","module","exports"],"mappings":";;;;;;;;AAAA;;AAWA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,SAAS;AAAA,2FAAG,iBACdC,KADc,EAEdC,IAFc,EAGdC,UAHc,EAIdC,WAJc,EAKdC,YALc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQV;AACIC,YAAAA,SATM,GASM,IATN;;AAUV,gBAAIJ,IAAI,CAACK,IAAL,KAAc,MAAlB,EAA0B;AACtBD,cAAAA,SAAS,GAAGE,YAAZ;AACH,aAFD,MAEO;AACHF,cAAAA,SAAS,GAAGG,UAAKC,eAAL,CAAZ;AACH;;AAEKC,YAAAA,EAhBI,GAgBCC,eAAOC,OAhBR;AAiBJC,YAAAA,aAjBI,GAiBY,IAAIC,eAAOC,QAAX,CAClBd,IAAI,CAACW,OADa,EAElBI,QAFkB,EAGlBL,cAHkB,CAjBZ,EAuBV;;AACMM,YAAAA,QAxBI,GAwBOH,eAAOI,KAAP,CAAaC,UAAb,CACbhB,WAAW,CAACiB,QAAZ,EADa,EAEbnB,IAAI,CAACoB,OAFQ,CAxBP,EA6BV;;AA7BU;AAAA,mBA8BcR,aAAa,CAACS,SAAd,CACpBZ,EADoB,EAEpBa,kCAFoB,CA9Bd;;AAAA;AA8BJD,YAAAA,SA9BI;;AAAA,iBAkCNA,SAAS,CAACE,GAAV,CAAcP,QAAd,CAlCM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmCiBJ,aAAa,CAACY,OAAd,CACnBF,kCADmB,EAEnB,IAAIT,eAAOY,SAAP,CAAiBC,IAArB,CAA0BC,oBAA1B,CAFmB,EAGnB;AACIC,cAAAA,QAAQ,EAAEA,gBADd;AAEIC,cAAAA,QAAQ,EAAE,IAAIC;AAFlB,aAHmB,CAnCjB;;AAAA;AAmCAC,YAAAA,QAnCA;AAAA;AAAA,mBA2CAC,iBAASC,IAAT,CAAcF,QAAQ,CAACG,IAAvB,EAA6B,YAAM;AACrCC,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,aAFK,CA3CA;;AAAA;AAAA;AAAA,mBAiDYxB,aAAa,CAACyB,SAAd,CAAwB5B,EAAxB,CAjDZ;;AAAA;AAiDJ6B,YAAAA,OAjDI;AAkDJC,YAAAA,YAlDI,GAkDW1B,eAAOI,KAAP,CAAaC,UAAb,CACjBhB,WAAW,CAACiB,QAAZ,EADiB,EAEjBnB,IAAI,CAACoB,OAFY,CAlDX;;AAAA,iBAuDNkB,OAAO,CAACf,GAAR,CAAYgB,YAAZ,CAvDM;AAAA;AAAA;AAAA;;AAwDAC,YAAAA,GAxDA,yBAwDqB,wBAAYF,OAAZ,CAxDrB,gBAwD+C,wBACjDC,YADiD,CAxD/C;AAAA;AAAA,mBA2DAE,iBAAiB,CAAC1C,KAAD,EAAQyC,GAAR,CA3DjB;;AAAA;AAAA;;AAAA;AA+DJE,YAAAA,KA/DI,GA+DI,IAAIC,UAAJ,CAAUnC,eAAV,EAAmBR,IAAI,CAACW,OAAxB,EAAiCX,IAAI,CAACoB,OAAtC,EAA+CpB,IAAI,CAAC4C,IAApD,CA/DJ;AAAA;AAAA,mBAiESC,aAAQC,aAAR,CAAsBJ,KAAtB,EAA6BtC,SAA7B,EAAwC4B,gBAAxC,CAjET;;AAAA;AAiEJe,YAAAA,IAjEI;AAmEJC,YAAAA,KAnEI,GAmEI,IAAIC,UAAJ,CAAU,CAACF,IAAD,CAAV,EAAkBL,KAAlB,EAAyBtC,SAAzB,CAnEJ;AAqEJ8C,YAAAA,SArEI,GAqEQ,IAAIC,UAAJ,CACdH,KADc,EAEd,IAAII,gBAAJ,CAAgBV,KAAhB,EAAuB1B,QAAvB,CAFc,EAGdqC,eAAUC,WAHI,CArER;AA2EJC,YAAAA,iBA3EI,GA2EgB,IAAIC,YAAJ,CAAYC,iBAAStC,QAAT,EAAZ,EAAiC,KAAjC,CA3EhB;AA6EJuC,YAAAA,YA7EI,GA6EWR,SAAS,CAACS,gBAAV,CAA2BJ,iBAA3B,EAA8CK,GA7EzD;AA+EJC,YAAAA,IA/EI,GA+EG,EA/EH;AAAA,mDAiFKb,KAAK,CAACa,IAjFX;;AAAA;AAiFV,kEAA2B;AAAlBC,gBAAAA,EAAkB;AACvBD,gBAAAA,IAAI,CAACE,IAAL,CAAUD,EAAE,CAACnD,OAAb;AACH;AAnFS;AAAA;AAAA;AAAA;AAAA;;AAqFJqD,YAAAA,QArFI,GAqFOC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,IAAgC,KAAK,EArF5C;AAuFJC,YAAAA,KAvFI,GAuFInB,SAAS,CAACoB,WAAV,CAAsBV,GAvF1B;AAAA;AAAA,mBAyFSW,4BAAoBC,wBAApB,CACf,IAAI3D,eAAOY,SAAP,CAAiBC,IAArB,CAA0B+C,MAAM,CAACJ,KAAD,CAAhC,CADe,EAEf,IAAIxD,eAAOY,SAAP,CAAiBC,IAArB,CAA0B+C,MAAM,CAACf,YAAD,CAAhC,CAFe,EAGfG,IAHe,EAIfpD,EAJe,EAKfuD,QALe,EAMf;AACIpC,cAAAA,QAAQ,EAAEA,gBADd;AAEIC,cAAAA,QAAQ,EAAE,IAAIC;AAFlB,aANe,CAzFT;;AAAA;AAyFJ4C,YAAAA,IAzFI;AAAA;AAAA,mBAqGJA,IAAI,CAACC,IAAL,EArGI;;AAAA;AAAA;AAAA,mBAuGJC,gBAAgB,CAAC7E,KAAD,EAAQC,IAAR,EAAcE,WAAd,EAA2BC,YAA3B,CAvGZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyGJqC,YAAAA,IAzGI,kCAyG0BtC,WAzG1B,cAyGyCF,IAAI,CAAC4C,IAzG9C,iBAyGyDzC,YAzGzD,cAyGyEH,IAAI,CAAC4C,IAzG9E;AAAA;AAAA,mBA0GJH,iBAAiB,CAAC1C,KAAD,EAAQyC,IAAR,cA1Gb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAT1C,SAAS;AAAA;AAAA;AAAA,GAAf;;AA8GA,IAAM8E,gBAAgB;AAAA,4FAAG,kBAAO7E,KAAP,EAAcC,IAAd,EAAoBE,WAApB,EAAiCC,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACG0E,eAAWC,OAAX,CAAmB;AAAEC,cAAAA,GAAG,EAAEhF,KAAK,CAACgF;AAAb,aAAnB,CADH;;AAAA;AACfC,YAAAA,SADe;AAErBA,YAAAA,SAAS,CAACC,MAAV,GAAmB,MAAnB;AAFqB;AAAA,mBAGfD,SAAS,CAACE,IAAV,EAHe;;AAAA;AAAA;AAAA,mBAMCC,iBAAaL,OAAb,CAAqB;AAAEM,cAAAA,OAAO,EAAErF,KAAK,CAACgF;AAAjB,aAArB,CAND;;AAAA;AAMfM,YAAAA,OANe;;AAOrB,gBAAIA,OAAJ,EAAa;AACTA,cAAAA,OAAO,CAACX,IAAR,GAAevE,YAAf;AACAkF,cAAAA,OAAO,CAACC,MAAR,GAAiBnF,YAAY,GAAGkF,OAAO,CAACE,MAAxC;AACAF,cAAAA,OAAO,CAACH,IAAR;AACH;;AAEK1C,YAAAA,GAbe,kBAaDtC,WAbC,cAacF,IAAI,CAAC4C,IAbnB,iBAa8BzC,YAb9B,cAa8CH,IAAI,CAAC4C,IAbnD;AAAA;AAAA,mBAcf,+BAAY,mBAAZ,EAAiCJ,GAAjC,CAde;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBoC,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAiBA,IAAMnC,iBAAiB;AAAA,4FAAG,kBAAO1C,KAAP,EAAcyC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBgD,YAAAA,CAAnB,8DAAuB,EAAvB;AAChBC,YAAAA,MADgB,GACP,IAAIC,YAAJ,CAAa;AAAEC,cAAAA,OAAO,EAAEnD,GAAX;AAAgBoD,cAAAA,OAAO,EAAEJ,CAAC,CAACrE,QAAF;AAAzB,aAAb,CADO;AAEtBsE,YAAAA,MAAM,CAACP,IAAP;AACA/C,YAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ,EAAiBgD,CAAjB,EAHsB,CAKtB;;AALsB;AAAA,mBAMEX,eAAWC,OAAX,CAAmB;AAAEC,cAAAA,GAAG,EAAEhF,KAAK,CAACgF;AAAb,aAAnB,CANF;;AAAA;AAMhBC,YAAAA,SANgB;AAOtBA,YAAAA,SAAS,CAACC,MAAV,GAAmB,OAAnB;AAPsB;AAAA,mBAQhBD,SAAS,CAACE,IAAV,EARgB;;AAAA;AAAA;AAAA,mBAShB,+BAAY,+BAAZ,EAA6C1C,GAA7C,CATgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBC,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;AAYAoD,MAAM,CAACC,OAAP,GAAiB;AAAEhG,EAAAA,SAAS,EAATA;AAAF,CAAjB","sourcesContent":["import {\r\n    Fetcher,\r\n    Percent,\r\n    Route,\r\n    Token,\r\n    TokenAmount,\r\n    Trade,\r\n    TradeType,\r\n    WETH,\r\n} from '@pancakeswap/sdk'\r\n\r\nimport { ethers } from 'ethers'\r\nimport { formatEther } from 'ethers/lib/utils'\r\nimport tokenABI from '../utils/abi/token.json'\r\nimport { TradeModal, LogModal, HistoryModal } from '../utils/db'\r\nimport { sendMessage } from '../utils/notification'\r\n\r\nimport {\r\n    provider,\r\n    wallet,\r\n    pancakeSwapContract,\r\n    pancakeSwapContractAddress,\r\n    chainID,\r\n    maxAllowance,\r\n    gasLimit,\r\n    slippage,\r\n    GWEI,\r\n    BUSD,\r\n} from '../utils/wallet'\r\n\r\nconst sellToken = async (\r\n    trade,\r\n    coin,\r\n    swapAmount,\r\n    tokenAmount,\r\n    currentPrice\r\n) => {\r\n    try {\r\n        // Check the SWAP TOKEN\r\n        let SWAPTOKEN = null\r\n        if (coin.base === 'BUSD') {\r\n            SWAPTOKEN = BUSD\r\n        } else {\r\n            SWAPTOKEN = WETH[chainID]\r\n        }\r\n\r\n        const to = wallet.address\r\n        const tokenContract = new ethers.Contract(\r\n            coin.address,\r\n            tokenABI,\r\n            wallet\r\n        )\r\n\r\n        // Get amount to sell\r\n        const amountIn = ethers.utils.parseUnits(\r\n            tokenAmount.toString(),\r\n            coin.decimal\r\n        )\r\n\r\n        // Check Allowance\r\n        const allowance = await tokenContract.allowance(\r\n            to,\r\n            pancakeSwapContractAddress\r\n        )\r\n        if (allowance.lte(amountIn)) {\r\n            const approved = await tokenContract.approve(\r\n                pancakeSwapContractAddress,\r\n                new ethers.BigNumber.from(maxAllowance),\r\n                {\r\n                    gasLimit: gasLimit,\r\n                    gasPrice: 5 * GWEI,\r\n                }\r\n            )\r\n            await provider.once(approved.hash, () => {\r\n                console.log('Approved...')\r\n            })\r\n        }\r\n\r\n        // Check Balance\r\n        const balance = await tokenContract.balanceOf(to)\r\n        const tokenBalance = ethers.utils.parseUnits(\r\n            tokenAmount.toString(),\r\n            coin.decimal\r\n        )\r\n\r\n        if (balance.lte(tokenBalance)) {\r\n            const msg = `Low balance ${formatEther(balance)} < ${formatEther(\r\n                tokenBalance\r\n            )} for this trade.`\r\n            await updateErrorStatus(trade, msg)\r\n            return\r\n        }\r\n\r\n        const TOKEN = new Token(chainID, coin.address, coin.decimal, coin.name)\r\n\r\n        const pair = await Fetcher.fetchPairData(TOKEN, SWAPTOKEN, provider)\r\n\r\n        const route = new Route([pair], TOKEN, SWAPTOKEN)\r\n\r\n        const tradeData = new Trade(\r\n            route,\r\n            new TokenAmount(TOKEN, amountIn),\r\n            TradeType.EXACT_INPUT\r\n        )\r\n\r\n        const slippageTolerance = new Percent(slippage.toString(), '100')\r\n\r\n        const amountOutMin = tradeData.minimumAmountOut(slippageTolerance).raw\r\n\r\n        const path = []\r\n\r\n        for (let px of route.path) {\r\n            path.push(px.address)\r\n        }\r\n\r\n        const deadline = Math.floor(Date.now() / 1000) + 60 * 10\r\n\r\n        const value = tradeData.inputAmount.raw\r\n\r\n        const sold = await pancakeSwapContract.swapExactTokensForTokens(\r\n            new ethers.BigNumber.from(String(value)),\r\n            new ethers.BigNumber.from(String(amountOutMin)),\r\n            path,\r\n            to,\r\n            deadline,\r\n            {\r\n                gasLimit: gasLimit,\r\n                gasPrice: 5 * GWEI,\r\n            }\r\n        )\r\n\r\n        await sold.wait()\r\n\r\n        await updateSoldStatus(trade, coin, tokenAmount, currentPrice)\r\n    } catch (e) {\r\n        const msg = `Error on token sell! ${tokenAmount} ${coin.name} at ${currentPrice} ${coin.name}`\r\n        await updateErrorStatus(trade, msg, e)\r\n    }\r\n}\r\n\r\nconst updateSoldStatus = async (trade, coin, tokenAmount, currentPrice) => {\r\n    const tradeInDB = await TradeModal.findOne({ _id: trade._id })\r\n    tradeInDB.status = 'SOLD'\r\n    await tradeInDB.save()\r\n\r\n    // Update history\r\n    const history = await HistoryModal.findOne({ tradeId: trade._id })\r\n    if (history) {\r\n        history.sold = currentPrice\r\n        history.profit = currentPrice - history.bought\r\n        history.save()\r\n    }\r\n\r\n    const msg = `Sold ${tokenAmount} ${coin.name} at ${currentPrice} ${coin.name}`\r\n    await sendMessage('${coin.name} sold', msg)\r\n}\r\n\r\nconst updateErrorStatus = async (trade, msg, e = '') => {\r\n    const newLog = new LogModal({ message: msg, details: e.toString() })\r\n    newLog.save()\r\n    console.log(msg, e)\r\n\r\n    // Update status and send notification\r\n    const tradeInDB = await TradeModal.findOne({ _id: trade._id })\r\n    tradeInDB.status = 'ERROR'\r\n    await tradeInDB.save()\r\n    await sendMessage('Error on selling ${coin.name}', msg)\r\n}\r\n\r\nmodule.exports = { sellToken }\r\n"],"file":"sell.js"}