{"version":3,"sources":["../../../src/graphql/trade/mutation.resolver.js"],"names":["Mutation","removeTrade","_","args","_id","TradeModal","findOne","tradeInDB","deleteOne","result","message","error","addTrade","tokenId","amount","parseFloat","buyLimit","sellLimit","stopLossLimit","status","TokenModal","tokenDb","newTrade","save","updateTrade","tradeDb","updated"],"mappings":"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","sourcesContent":["import { TradeModal, TokenModal } from '../../utils/db'\r\n\r\nexport default {\r\n    Mutation: {\r\n        removeTrade: async (_, args) => {\r\n            const { _id } = args\r\n            try {\r\n                const tradeInDB = await TradeModal.findOne({ _id })\r\n                if (tradeInDB !== null) {\r\n                    await TradeModal.deleteOne({ _id })\r\n                    return { result: tradeInDB, message: 'Trade removed.' }\r\n                }\r\n                return { error: `Error on trade remove.` }\r\n            } catch (e) {\r\n                return { error: `Error on trade remove.` }\r\n            }\r\n        },\r\n        addTrade: async (_, args) => {\r\n            const tokenId = args.tokenId\r\n            const amount = args.amount && parseFloat(args.amount)\r\n            const buyLimit = args.buyLimit && parseFloat(args.buyLimit)\r\n            const sellLimit = args.sellLimit && parseFloat(args.sellLimit)\r\n            const stopLossLimit =\r\n                args.stopLossLimit && parseFloat(args.stopLossLimit)\r\n            const status = args.status || 'INIT'\r\n\r\n            try {\r\n                const tokenDb = await TokenModal.findOne({ _id: tokenId })\r\n                if (tokenDb !== null) {\r\n                    const newTrade = TradeModal({\r\n                        tokenId,\r\n                        amount,\r\n                        buyLimit,\r\n                        sellLimit,\r\n                        stopLossLimit,\r\n                        status,\r\n                    })\r\n                    newTrade.save()\r\n                    return {\r\n                        result: newTrade,\r\n                        message: `Trade added.`,\r\n                    }\r\n                } else {\r\n                    return { error: 'Set the coin first.' }\r\n                }\r\n            } catch (e) {\r\n                return { error: 'Error on token add.' }\r\n            }\r\n        },\r\n        updateTrade: async (_, args) => {\r\n            const _id = args._id\r\n            const tokenId = args.tokenId\r\n            const amount = args.amount && parseFloat(args.amount)\r\n            const buyLimit = args.buyLimit && parseFloat(args.buyLimit)\r\n            const sellLimit = args.sellLimit && parseFloat(args.sellLimit)\r\n            const stopLossLimit =\r\n                args.stopLossLimit && parseFloat(args.stopLossLimit)\r\n            const status = args.status\r\n\r\n            try {\r\n                const tokenDb = await TokenModal.findOne({ _id: tokenId })\r\n                if (!tokenId || tokenDb !== null) {\r\n                    const tradeDb = await TradeModal.findOne({ _id })\r\n\r\n                    if (amount) tradeDb.amount = amount\r\n                    if (buyLimit) tradeDb.buyLimit = buyLimit\r\n                    if (sellLimit) tradeDb.sellLimit = sellLimit\r\n                    if (stopLossLimit) tradeDb.stopLossLimit = stopLossLimit\r\n                    if (status) tradeDb.status = status\r\n                    if (tokenId) tradeDb.tokenId = tokenId\r\n\r\n                    const updated = await tradeDb.save()\r\n                    return {\r\n                        message: `trade updated.`,\r\n                        result: updated,\r\n                    }\r\n                }\r\n                return { error: 'Set the coin first.' }\r\n            } catch (e) {\r\n                return { error: '`Error on trade update.' }\r\n            }\r\n        },\r\n    },\r\n}\r\n"],"file":"mutation.resolver.js"}