{"version":3,"sources":["../../../src/graphql/logs/query.resolver.js"],"names":["Query","getLogs","_","args","ctx","LogModal","find","sort","updatedAt","logs","result","error"],"mappings":";;;;;;;;;;;;;AAAA;;eAEe;AACXA,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO;AAAA,mGAAE,iBAAOC,CAAP,EAAUC,IAAV,EAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBC,aAASC,IAAT,GAAgBC,IAAhB,CAAqB;AACpCC,kBAAAA,SAAS,EAAE,CAAC;AADwB,iBAArB,CAFlB;;AAAA;AAEKC,gBAAAA,IAFL;AAAA,iDAKM;AAAEC,kBAAAA,MAAM,EAAED;AAAV,iBALN;;AAAA;AAAA;AAAA;AAAA,iDAOM;AAAEE,kBAAAA,KAAK;AAAP,iBAPN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADJ;AADI,C","sourcesContent":["import { LogModal } from '../../utils/db'\r\n\r\nexport default {\r\n    Query: {\r\n        getLogs: async (_, args, ctx) => {\r\n            try {\r\n                const logs = await LogModal.find().sort({\r\n                    updatedAt: -1,\r\n                })\r\n                return { result: logs }\r\n            } catch (e) {\r\n                return { error: `No logs found.` }\r\n            }\r\n        },\r\n    },\r\n}\r\n"],"file":"query.resolver.js"}