{"version":3,"sources":["../../src/utils/db.js"],"names":["require","config","dbUser","process","env","DB_USER","dbPassword","DB_PASSWORD","startDB","mongoose","connect","useNewUrlParser","useUnifiedTopology","useFindAndModify","useCreateIndex","connection","on","err","console","log","connected","readyState","Schema","tradeSchema","status","type","String","tokenId","required","amount","Number","buyLimit","sellLimit","stopLossLimit","timestamps","TradeModal","model","tokenSchema","name","unique","address","decimal","slug","base","TokenModal","historySchema","tradeId","bought","sold","profit","HistoryModal","logSchema","message","details","LogModal","deviceSchema","token","DeviceModal","module","exports"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose'\r\nrequire('dotenv').config()\r\n\r\nconst dbUser = process.env.DB_USER\r\nconst dbPassword = process.env.DB_PASSWORD\r\n\r\nconst startDB = async () => {\r\n    try {\r\n        await mongoose.connect(\r\n            `mongodb+srv://${dbUser}:${dbPassword}@bot.bpetg.mongodb.net/botv2?retryWrites=true&w=majority`,\r\n            {\r\n                useNewUrlParser: true,\r\n                useUnifiedTopology: true,\r\n                useFindAndModify: false,\r\n                useCreateIndex: true,\r\n            }\r\n        )\r\n\r\n        mongoose.connection.on('error', (err) => {\r\n            console.log(err)\r\n        })\r\n\r\n        const connected = mongoose.connection.readyState\r\n        if (connected === 1) {\r\n            console.log('Connected to Database.')\r\n        } else if (connected === 2) {\r\n            console.log('Connecting to Database.')\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nconst Schema = mongoose.Schema\r\n\r\nconst tradeSchema = new Schema(\r\n    {\r\n        status: {\r\n            type: String,\r\n            enum: ['INIT', 'BOUGHT', 'SOLD', 'ERROR'],\r\n            default: 'INIT',\r\n        },\r\n        tokenId: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        amount: Number,\r\n        buyLimit: Number,\r\n        sellLimit: Number,\r\n        stopLossLimit: Number,\r\n    },\r\n    {\r\n        timestamps: true,\r\n    }\r\n)\r\n\r\nconst TradeModal = mongoose.model('Trade', tradeSchema)\r\n\r\nconst tokenSchema = new Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n            unique: true,\r\n        },\r\n        address: String,\r\n        decimal: {\r\n            type: Number,\r\n            default: 18,\r\n        },\r\n        slug: String,\r\n        base: {\r\n            type: String,\r\n            enum: ['BNB', 'BUSD'],\r\n            default: 'BNB',\r\n        },\r\n    },\r\n    {\r\n        timestamps: true,\r\n    }\r\n)\r\n\r\nconst TokenModal = mongoose.model('Token', tokenSchema)\r\n\r\nconst historySchema = new Schema(\r\n    {\r\n        tradeId: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        bought: Number,\r\n        sold: Number,\r\n        profit: Number,\r\n    },\r\n    {\r\n        timestamps: true,\r\n    }\r\n)\r\n\r\nconst HistoryModal = mongoose.model('History', historySchema)\r\n\r\nconst logSchema = new Schema(\r\n    {\r\n        message: String,\r\n        details: String,\r\n    },\r\n    {\r\n        timestamps: true,\r\n    }\r\n)\r\n\r\nconst LogModal = mongoose.model('Log', logSchema)\r\n\r\nconst deviceSchema = new Schema(\r\n    {\r\n        token: String,\r\n    },\r\n    {\r\n        timestamps: true,\r\n    }\r\n)\r\n\r\nconst DeviceModal = mongoose.model('Device', deviceSchema)\r\n\r\nmodule.exports = {\r\n    TradeModal,\r\n    TokenModal,\r\n    LogModal,\r\n    startDB,\r\n    DeviceModal,\r\n    HistoryModal,\r\n}\r\n"],"file":"db.js"}